<?xml version='1.0' encoding='utf-8'?>

<!-- Copyright (C) 2010 Swiss Library for the Blind, Visually Impaired and Print Disabled -->

<!-- This file is part of dtbook2sbsform. -->

<!-- dtbook2sbsform is free software: you can redistribute it -->
<!-- and/or modify it under the terms of the GNU Lesser General Public -->
<!-- License as published by the Free Software Foundation, either -->
<!-- version 3 of the License, or (at your option) any later version. -->

<!-- This program is distributed in the hope that it will be useful, -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU -->
<!-- Lesser General Public License for more details. -->

<!-- You should have received a copy of the GNU Lesser General Public -->
<!-- License along with this program. If not, see -->
<!-- <http://www.gnu.org/licenses/>. -->

<!-- TODO: make this RNGSchema independent of wagnerb's personal configuration.
  http://www.oxygenxml.com/pipermail/oxygen-user/2009-January/002167.html 
  http://groups.google.com/group/daisy-pipeline-dev/msg/a221f2081d87bdb1
  <?oxygen RNGSchema="File:///home/wagnerb/archive/oxygen/utfx_tests.rng" type="xml"?>
-->

<!DOCTYPE utfx:tests PUBLIC "-//UTF-X//DTD utfx-tests 1.0//EN" "utfx_tests.dtd">
<utfx:tests xmlns:utfx="http://utfx.org/test-definition"
  xmlns:dtb="http://www.daisy.org/z3986/2005/dtbook/"
  xmlns:brl="http://www.daisy.org/z3986/2009/braille/">
  <utfx:stylesheet src="xsl/dtbook2sbsform.xsl"/>

  <!-- TODO: check which asserts really need utfx:assert-equal normalise-internal-whitespace="yes" -->
  <!-- TODO: utfx-bug: when empty <utfx:expected/>, utfx:expected of previous test is used. -->
  
  <!-- Element tests -->
  <utfx:test>
    <utfx:name>Translation of h1</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:h1 xml:lang="de">foo</dtb:h1>
      </utfx:source>
      <utfx:expected>
y H1
 FOO
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of h1 with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:h1 xml:lang="de" brl:class="foo">foo</dtb:h1>
      </utfx:source>
      <utfx:expected>
y H1_foo
 FOO
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of h1 with leading and trailing spaces</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:h1 xml:lang="de"> foo <brl:v-form>Bar</brl:v-form> </dtb:h1>
      </utfx:source>
      <utfx:expected>
y H1
  FOO $BAR 
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of h2</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:h2 xml:lang="de">foo</dtb:h2>
      </utfx:source>
      <utfx:expected>
y H2
 FOO
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of h2 with with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:h2 xml:lang="de" brl:class="foo">foo</dtb:h2>
      </utfx:source>
      <utfx:expected>
y H2_foo
 FOO
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of p</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:p xml:lang="de">foo</dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 FOO</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of h2 with with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:p xml:lang="de" brl:class="foo">foo</dtb:p>
      </utfx:source>
      <utfx:expected>
y P_foo
 FOO</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of Blockquote</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:blockquote xml:lang="de"></dtb:blockquote>
      </utfx:source>
      <utfx:expected>
y BLQUOb

y BLQUOe
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of Blockquote with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:blockquote xml:lang="de" brl:class="foo"></dtb:blockquote>
      </utfx:source>
      <utfx:expected>
y BLQUOb_foo

y BLQUOe_foo
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of epigraph</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:epigraph xml:lang="de"></dtb:epigraph>
      </utfx:source>
      <utfx:expected>
y EPIGRb

y EPIGRe
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of epigraph with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:epigraph xml:lang="de" brl:class="foo"></dtb:epigraph>
      </utfx:source>
      <utfx:expected>
y EPIGRb_foo

y EPIGRe_foo
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of author</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:author xml:lang="de">Hans</dtb:author>
      </utfx:source>
      <utfx:expected>
y AUTHOR
 H+S</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of author with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:author xml:lang="de" brl:class="foo">Hans</dtb:author>
      </utfx:source>
      <utfx:expected>
y AUTHOR_foo
 H+S</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of byline</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:byline xml:lang="de">Hans</dtb:byline>
      </utfx:source>
      <utfx:expected>
y BYLINE
 H+S</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of byline with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:byline xml:lang="de" brl:class="foo">Hans</dtb:byline>
      </utfx:source>
      <utfx:expected>
y BYLINE_foo
 H+S</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of poem</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:poem xml:lang="de"></dtb:poem>
      </utfx:source>
      <utfx:expected>
y POEMb

y POEMe
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of poem with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:poem xml:lang="de" brl:class="foo"></dtb:poem>
      </utfx:source>
      <utfx:expected>
y POEMb_foo

y POEMe_foo
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Selection feature</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<brl:select xml:lang="de">
	  <brl:when-braille>
	    <brl:literal>Foo</brl:literal>
	  </brl:when-braille>
	  <brl:otherwise>Bar</brl:otherwise>
	</brl:select>
      </utfx:source>
      <utfx:expected>Foo</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Selection feature with literals with grade attrs</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<brl:select xml:lang="de">
	  <brl:when-braille>
	    <brl:literal brl:grade="1">Foo</brl:literal>
	    <brl:literal brl:grade="2">Bar</brl:literal>
	  </brl:when-braille>
	  <brl:otherwise>Baz</brl:otherwise>
	</brl:select>
      </utfx:source>
      <utfx:expected>Bar</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Selection feature with mixed literals and text nodes</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<brl:select xml:lang="de">
	  <brl:when-braille>Foo <brl:literal>Bar</brl:literal></brl:when-braille>
	  <brl:otherwise>Baz</brl:otherwise>
	</brl:select>
      </utfx:source>
      <utfx:expected>FOO Bar</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Selection feature inside &lt;em&gt;</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">
          <dtb:p><dtb:em brl:render="quote"><brl:select><brl:when-braille><brl:literal>'.DD'.</brl:literal></brl:when-braille><brl:otherwise>♫</brl:otherwise></brl:select> Hörst du das Pfeifen vom Murmeltier droben ...</dtb:em></dtb:p>
	</stub>
      </utfx:source>
      <utfx:expected>
y P
 ('.DD'. H9R] DU D PF3FC VM MURMYT0R DROBC ...)</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>div element</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:div brl:class="foo" xml:lang="de">
	</dtb:div>
      </utfx:source>
      <utfx:expected>
y DIVb_foo

y DIVe_foo
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Datum: Tag Monat Jahr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><brl:date value="2011-01-01">1.1.2011</brl:date></stub>
      </utfx:source>
      <utfx:expected>#,A#BJAA</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Datum: Tag Monat</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><brl:date value="--01-01">1.1.</brl:date></stub>
      </utfx:source>
      <utfx:expected>#,A</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Time</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><brl:time value="10:30">10:30</brl:time></stub>
      </utfx:source>
      <utfx:expected>#AJ.CJ</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Time with leading zeros</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><brl:time value="10:05">10:05</brl:time></stub>
      </utfx:source>
      <utfx:expected>#AJ.JE</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <!-- Expected Failure -->
  <!-- <utfx:test> -->
  <!--   <utfx:name>Span inside span: Kills Whitespace, ignores "reduced"</utfx:name> -->
  <!--   <utfx:stylesheet-params> -->
  <!--     <utfx:with-param name="contraction" select="1"/> -->
  <!--   </utfx:stylesheet-params> -->
  <!--   <utfx:assert-equal> -->
  <!--     <utfx:source> -->
  <!--       <stub xml:lang="de"><brl:span brl:accents="reduced">Bèr</brl:span> <dtb:span xml:lang="de" brl:grade="2">Bèr <brl:span brl:accents="reduced">Bèr</brl:span></dtb:span></stub> -->
  <!--     </utfx:source> -->
  <!--     <utfx:expected>B"ER B"^R B"ER</utfx:expected> -->
  <!--   </utfx:assert-equal> -->
  <!-- </utfx:test> -->
  
  <!-- Expected Failure -->
  <!-- <utfx:test> -->
  <!--   <utfx:name>Span inside span 3</utfx:name> -->
  <!--   <utfx:stylesheet-params> -->
  <!--     <utfx:with-param name="contraction" select="1"/> -->
  <!--   </utfx:stylesheet-params> -->
  <!--   <utfx:assert-equal> -->
  <!--     <utfx:source> -->
  <!--       <stub xml:lang="de"><dtb:span xml:lang="de" brl:grade="2">Bèr <brl:span brl:accents="reduced">Bèr</brl:span></dtb:span></stub> -->
  <!--     </utfx:source> -->
  <!--     <utfx:expected>B"^R B"ER'.</utfx:expected> -->
  <!--   </utfx:assert-equal> -->
  <!-- </utfx:test> -->
  
  <!-- Expected Failure -->
  <!-- <utfx:test> -->
  <!--   <utfx:name>Span inside span 4</utfx:name> -->
  <!--   <utfx:stylesheet-params> -->
  <!--     <utfx:with-param name="contraction" select="1"/> -->
  <!--   </utfx:stylesheet-params> -->
  <!--   <utfx:assert-equal> -->
  <!--     <utfx:source> -->
  <!--       <stub xml:lang="de"><dtb:p><dtb:span xml:lang="de" brl:grade="2">Bèr <brl:span brl:accents="reduced">Bèr</brl:span></dtb:span></dtb:p></stub> -->
  <!--     </utfx:source> -->
  <!--     <utfx:expected>B"^R B"ER'.</utfx:expected> -->
  <!--   </utfx:assert-equal> -->
  <!-- </utfx:test> -->
  
  <utfx:test>
    <utfx:name>vform in em Bug#1413</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:p><dtb:em>und <brl:v-form>Sie</brl:v-form> <brl:v-form>Ihren</brl:v-form></dtb:em></dtb:p></stub>
      </utfx:source>
      <utfx:expected>
y P
 __U $S $IC'.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>inline after inline</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:p><dtb:span grade="2">Quark</dtb:span> <dtb:span grade="2">Quark</dtb:span></dtb:p></stub>
      </utfx:source>
      <utfx:expected>
y P
 'QU)K 'QU)K</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>brl:emph at beginning of block</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:p><brl:emph>Quark</brl:emph></dtb:p></stub>
      </utfx:source>
      <utfx:expected>
y P
 _'QU)K</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Wrong SBSForm-Macroname Bug #1539</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <stub xml:lang="de"><dtb:p><dtb:list brl:class="name" type="pl"><dtb:li>bla</dtb:li></dtb:list></dtb:p></stub>
      </utfx:source>
      <utfx:expected>
y P
 
y PLISTb_name

y LI
 BLA

y PLISTe_name
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Span inside span 2</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p><dtb:span brl:accents="reduced">René</dtb:span></dtb:p>
          <dtb:p><dtb:span brl:accents="reduced">René René</dtb:span></dtb:p>
          <dtb:p>Kurz <dtb:span>╚</dtb:span><dtb:span brl:grade="1" brl:accents="reduced">René René</dtb:span><dtb:span>╝</dtb:span> René</dtb:p>
          <dtb:p><dtb:span>╚</dtb:span><dtb:span brl:grade="1">René <dtb:span brl:accents="reduced">René</dtb:span> René</dtb:span><dtb:span>╝</dtb:span></dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 RC"E
y P
 RC"E RC"E
y P
 KZ -.REN"E REN"E'. RC"%
y P
 -.REN"% REN"E REN"%'.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Span inside em</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de"><dtb:em>Hallo <dtb:span brl:accents="reduced">René</dtb:span></dtb:em></stub>
      </utfx:source>
      <utfx:expected>__HAQO RC"E'.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Downgrading</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="hyphenation" select="true()"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>Kurzschrift schrift schrift <dtb:span>╙</dtb:span><dtb:span brl:grade="1">Vollschrift</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span>╙</dtb:span><dtb:span brl:grade="0">Basisschrift</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span>╚</dtb:span><dtb:span brl:grade="1">Vollschrift schrift schrift</dtb:span><dtb:span>╝</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span>╚</dtb:span><dtb:span brl:grade="0">Basisschrift schrift schrift</dtb:span><dtb:span>╝</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span>╚</dtb:span><dtb:span brl:grade="1">Vollschrift/Vollschrift</dtb:span><dtb:span>╝</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span>╚</dtb:span><dtb:span brl:grade="0">Basisschrift/Basisschrift</dtb:span><dtb:span>╝</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span>╚</dtb:span><dtb:span brl:grade="1">Vollschrift-&#x200B;Vollschrift</dtb:span><dtb:span>╝</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span>╚</dtb:span><dtb:span brl:grade="0">Basisschrift-&#x200B;Basisschrift</dtb:span><dtb:span>╝</dtb:span> kurz kurz kurz</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 KZ5T 5T 5T '.VOLL5RIFT KZ KZ KZ
y P
 KZ5T 5T 5T '.BASISSCHRIFT KZ KZ KZ
y P
 KZ5T 5T 5T -.VOLL5RIFT 5RIFT 5RIFT'. KZ KZ KZ
y P
 KZ5T 5T 5T -.BASISSCHRIFT SCHRIFT SCHRIFT'. KZ KZ KZ
y P
 KZ5T 5T 5T -.VOLL5RIFT!,mVOLL5RIFT'. KZ KZ KZ
y P
 KZ5T 5T 5T -.BASISSCHRIFT!,mBASISSCHRIFT'. KZ KZ KZ
y P
 KZ5T 5T 5T -.VOLL5RIFT-mVOLL5RIFT'. KZ KZ KZ
y P
 KZ5T 5T 5T -.BASISSCHRIFT-mBASISSCHRIFT'. KZ KZ KZ</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Language change (feature #1604)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>Jetzt folgt ein Gedicht:</dtb:p>
          <dtb:poem xml:lang="en">
            <dtb:linegroup>
              <dtb:line><dtb:span>╚</dtb:span>If you want to get a favour done</dtb:line>
              <dtb:line>By some obliging friend,</dtb:line>
              <dtb:line>And want a promise, safe and sure,</dtb:line>
              <dtb:line>On which you may depend,</dtb:line>
              <dtb:line>Don't go to him who always has</dtb:line>
              <dtb:line>Much leisure time to plan,</dtb:line>
              <dtb:line>If you want your favour done,</dtb:line>
              <dtb:line>Just ask the busy man.<dtb:span>╝</dtb:span></dtb:line>
            </dtb:linegroup>
          </dtb:poem>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 J FGT 6 &amp;D#T:
y POEMb

y LINEGRb
 
y LINEb
 -.IF YOU WANT TO GET A FAVOUR DONE
y LINEe

y LINEb
 BY SOME OBLIGING FRIEND,
y LINEe

y LINEb
 AND WANT A PROMISE, SAFE AND SURE,
y LINEe

y LINEb
 ON WHICH YOU MAY DEPEND,
y LINEe

y LINEb
 DON'T GO TO HIM WHO ALWAYS HAS
y LINEe

y LINEb
 MUCH LEISURE TIME TO PLAN,
y LINEe

y LINEb
 IF YOU WANT YOUR FAVOUR DONE,
y LINEe

y LINEb
 JUST ASK THE BUSY MAN.'.
y LINEe

y LINEGRe

y POEMe
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
 
  <utfx:test>
    <utfx:name>Wort "ich" am Ende von Inlines mit nachfolgendem Satzzeichen</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>Ich</dtb:em>, <dtb:strong>ich</dtb:strong>; <brl:emph>ich</brl:emph>: <dtb:em>ich</dtb:em>? <dtb:strong>ich</dtb:strong>! (<brl:emph>ich</brl:emph>) »<brl:emph>ich</brl:emph>«.</stub>
      </utfx:source>
      <utfx:expected>_I4, _I4; _I4: _I4? _I4+ =_I4= (_I4).</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Emphasis: Wortgrenzenerkennung bei "-" und "/"</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="hyphenation" select="true()"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>Wort</dtb:em>, <dtb:strong>Wort</dtb:strong>, <brl:emph>Wort</brl:emph>. <dtb:em>Zwei Wörter</dtb:em>, <dtb:strong>eins/zwei</dtb:strong>, <brl:emph>eins-&#x200B;zwei</brl:emph>.</stub>
      </utfx:source>
      <utfx:expected>_W?T, _W?T, _W?T. __ZW3 W9RT7'., __6S!,mZW3'., __6S-mZW3'..</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Separator ist keine Wortgrenze</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><brl:homograph>testor<brl:separator/>test</brl:homograph></stub>
      </utfx:source>
      <utfx:expected>TE]?(]</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Braille-Literal</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Musik <brl:select><brl:when-braille><brl:literal>@#Lv._@&gt;&amp;2K</brl:literal></brl:when-braille> 
            <brl:otherwise>[Note E im Bassschlüssel]</brl:otherwise></brl:select> ist doch ganz einfach.</stub>
      </utfx:source>
      <utfx:expected>MK @#Lv._@&gt;&amp;2K ] D4 GZ 6F&lt;.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Römische Zahlen</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <dtb:p xml:lang="de">Henry <brl:num role="roman">IV</brl:num>.
          Auf Seite <brl:num role="roman">iii</brl:num> beginnt das Vorwort.</dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 HCR'Y >IV. 1 S3( 'III ;G*NT D ,?W?T.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Ordnungszahlen</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="downshift_ordinals" select="true()"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <dtb:p xml:lang="de">Am <brl:num role="ordinal">5.</brl:num> Tag geschah es zum <brl:num role="ordinal">1004.</brl:num>
          (oder <brl:num role="ordinal">1005.</brl:num>) Mal.</dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 AM #? TAG &amp;5AH % ZM #,))/ =O #,))?'= MAL.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>line break before ndash Bug#1212</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="downshift_ordinals" select="true()"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">word
&#x2013; word</stub>
      </utfx:source>
      <utfx:expected>W?D'- W?D</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Telefonnummern</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <dtb:p xml:lang="de">Telefon <brl:num role="phone">041 / 123 45 67</brl:num>? Telefon <brl:num role="phone">041/123'45'67</brl:num>!</dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 TYEFON #JDA.ABC.DE.FG'? TYEFON #JDA.ABC.DE.FG'+</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Brüche</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <dtb:p xml:lang="de"><brl:num role="fraction">1/3</brl:num>? <brl:num role="fraction">2/5</brl:num>, (<brl:num role="fraction">13/15</brl:num>) <brl:num role="mixed">3 2/5</brl:num>? <brl:num role="mixed">1 12/19</brl:num>, (<brl:num role="mixed">3 24/25</brl:num>)</dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 #A:'? #B?', =#AC,?'= #C#B?'? #A#AB,*', =#C#BD;?'=</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>ISBN</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <dtb:p xml:lang="de"><dtb:abbr>ISBN</dtb:abbr> <brl:num role="isbn">978-3-86971-001-3</brl:num> <dtb:abbr>ISBN</dtb:abbr> <brl:num role="isbn">978-3-86971-001-X</brl:num> <dtb:abbr>ISBN</dtb:abbr> <brl:num role="isbn">978 3 86971 001 3</brl:num></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 &gt;ISBN #IGH.C.HFIGA.JJA.C &gt;ISBN #IGH.C.HFIGA.JJA-&gt;X &gt;ISBN #IGH.C.HFIGA.JJA.C</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>abbr 1</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <dtb:p xml:lang="de"><dtb:abbr>A4</dtb:abbr></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 &gt;A#D</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>abbr 2 Bug #1523</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"><dtb:abbr>RTÉ</dtb:abbr></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 &gt;RT"%</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>abbr 3 "C2D" Bug #1523</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"><dtb:abbr>C2D</dtb:abbr></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 &gt;C#B&gt;D</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>abbr 4 Single Uppercase Letter "C" Bug #1523</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"><dtb:abbr>C</dtb:abbr></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 &gt;C</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>abbr 5 "c2d" Bug #1523</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"><dtb:abbr>c2d</dtb:abbr></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 'C#B'D</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>abbr 6 "GmbH" Bug #1523</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"><dtb:abbr>GmbH</dtb:abbr></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 $GMB&gt;H</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <!-- <utfx:test> -->
  <!--   <utfx:name>abbr 7 "km/h" Bug #1523</utfx:name> -->
  <!--   <utfx:stylesheet-params> -->
  <!--     <utfx:with-param name="contraction" select="2"/> -->
  <!--   </utfx:stylesheet-params> -->
  <!--   <utfx:assert-equal normalise-internal-whitespace="yes"> -->
  <!--     <utfx:source> -->
  <!--       <dtb:p xml:lang="de"><dtb:abbr>km/h</dtb:abbr></dtb:p> -->
  <!--     </utfx:source> -->
  <!--     <utfx:expected>y P
 'KM!,'H</utfx:expected> -->
  <!--   </utfx:assert-equal> -->
  <!-- </utfx:test> -->
  
  <utfx:test>
    <utfx:name>abbr 8 "kHz" Bug #1523</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"><dtb:abbr>kHz</dtb:abbr></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 'K$HZ</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>abbr 9 "DM 50" (white space) Bug #1523</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"><dtb:abbr>DM </dtb:abbr>50</dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 &gt;DM#EJ</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <!-- <utfx:test> -->
  <!--   <utfx:name>num role=measure "14 km/h" Bug #1523</utfx:name> -->
  <!--   <utfx:stylesheet-params> -->
  <!--     <utfx:with-param name="contraction" select="2"/> -->
  <!--   </utfx:stylesheet-params> -->
  <!--   <utfx:assert-equal normalise-internal-whitespace="yes"> -->
  <!--     <utfx:source> -->
  <!--       <dtb:p xml:lang="de"><brl:num role="measure">14 km/h</brl:num></dtb:p> -->
  <!--     </utfx:source> -->
  <!--     <utfx:expected>
y P
 #AD'KM!,'H</utfx:expected> -->
  <!--   </utfx:assert-equal> -->
  <!-- </utfx:test> -->

  <!-- <utfx:test> -->
  <!--   <utfx:name>num role=measure 1 "20m" Bug #1213</utfx:name> -->
  <!--   <utfx:stylesheet-params> -->
  <!--     <utfx:with-param name="contraction" select="2"/> -->
  <!--   </utfx:stylesheet-params> -->
  <!--   <utfx:assert-equal normalise-internal-whitespace="yes"> -->
  <!--     <utfx:source> -->
  <!--       <dtb:p xml:lang="de"><brl:num role="measure">20m</brl:num></dtb:p> -->
  <!--     </utfx:source> -->
  <!--     <utfx:expected>
y P
 #BJ'M</utfx:expected> -->
  <!--   </utfx:assert-equal> -->
  <!-- </utfx:test> -->
  
  <!-- <utfx:test> -->
  <!--   <utfx:name>num role=measure 2 "20km/h" Bug #1213</utfx:name> -->
  <!--   <utfx:stylesheet-params> -->
  <!--     <utfx:with-param name="contraction" select="2"/> -->
  <!--   </utfx:stylesheet-params> -->
  <!--   <utfx:assert-equal normalise-internal-whitespace="yes"> -->
  <!--     <utfx:source> -->
  <!--       <dtb:p xml:lang="de"><brl:num role="measure">20km/h</brl:num></dtb:p> -->
  <!--     </utfx:source> -->
  <!--     <utfx:expected>
y P
 #BJ'KM!,'H</utfx:expected> -->
  <!--   </utfx:assert-equal> -->
  <!-- </utfx:test> -->

  <utfx:test>
    <utfx:name>Namen mit Upshifts (McDonalds) werden von brl:name nicht behandelt Bug #1343</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"><brl:name>McCartney</brl:name></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 $MC$CARTNEY</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Ausdrücke wie XBox mit abbr nicht handlebar Bug #1477</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"><dtb:abbr>X</dtb:abbr><dtb:abbr>Box</dtb:abbr></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 &gt;X$BOX</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>24 mm Falsches Resultat bei brl:num role="measure", wenn Zeilenumbruch zwischen Zahl und Einheit steht Bug #1263</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"><brl:num role="measure">24
          mm</brl:num></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 #BD'MM</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
<!--  <utfx:test>
    <utfx:name>CHF 24 Falsches Resultat bei brl:num role="measure", wenn Zeilenumbruch zwischen Zahl und Einheit steht Bug #1263</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"><brl:num role="measure">CHF 24</brl:num></dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 >CHF#BD</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
-->  
  <utfx:test>
    <utfx:name>Fehlender Pt. 6 (Apo) vor durch BRL:RENDER="QUOTE" erzeugten Schlusszeichen (bei Zahlen) Bug #1520</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"> Rakete <dtb:em brl:render="quote">Ariane 2</dtb:em> und </dtb:p>
      </utfx:source>
      <utfx:expected>
y P
  RAKETE (ARIANE #B') UND </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Fehlender Pt. 6 (Apo) vor durch BRL:RENDER="QUOTE" erzeugten Schlusszeichen (bei Zahlen) Bug #1520</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"> Rakete <dtb:em brl:render="quote">Ariane ¾</dtb:em> und </dtb:p>
      </utfx:source>
      <utfx:expected>
y P
  RAKETE (ARIANE #C/') UND </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>deep last text node</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <dtb:p xml:lang="de"> Rakete <dtb:em brl:render="quote">Ariane <brl:num>2</brl:num></dtb:em> und </dtb:p>
      </utfx:source>
      <utfx:expected>
y P
  RAKETE (ARIANE #B') UND </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <!--  <utfx:test> TODO: how to test xsl:function with utf-x?
    <utfx:name>my:isLetter</utfx:name>
    <utfx:call-function name="my:isLetter">
      <utfx:with-param name="char" select="A" />
    </utfx:call-function>
    <utfx:assert-equal>
      <utfx:source>
        <empty/>
      </utfx:source>
      <utfx:expected>true</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
-->  
  
<!--  <utfx:test>
    <utfx:name>my:isLetter</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <dtb:p id="testIsLetter">C</dtb:p>
      </utfx:source>
      <utfx:expected>
y P
 true</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>-->
  
  
<!--  <utfx:test>
    <utfx:name>handle_abbr</utfx:name>
    <utfx:call-template name="handle_abbr">
      <utfx:with-param name="context" select="'abbr'" />
      <utfx:with-param name="content" select="'SJW-'" />
    </utfx:call-template>
    <utfx:assert-equal>
      <utfx:source>
        <dtb:p xml:lang="de"/>
      </utfx:source>
      <utfx:expected>&gt;SJW-</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
-->
  
  <utfx:test>
    <utfx:name>text nodes ending with punctuation</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>wort</dtb:p>
          <dtb:p>»aber</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 W?T
y P
 (A</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  
  <utfx:test>
    <utfx:name>text nodes ending with punctuation with first word inline</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p><dtb:em>wort</dtb:em></dtb:p>
          <dtb:p>»aber</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 _W?T
y P
 (A</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>brl:volume und pagnum Bug #1290</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal normalise-internal-whitespace="yes">
      <utfx:source>
        <stub xml:lang="de">
          <dtb:level1>
            <dtb:h1>Titel1</dtb:h1>
            <dtb:p>bla</dtb:p>
          </dtb:level1>
          <brl:volume brl:grade="2"/>
          <dtb:level1>
            <dtb:pagenum id="page-165" page="normal">165</dtb:pagenum>
            <dtb:h1>Titel2</dtb:h1>
            <dtb:p>blo</dtb:p>
          </dtb:level1>
        </stub>
      </utfx:source>
      <utfx:expected>
y LEVEL1b
.xNOPAGENUM

y H1
 TITY'#A

y P
 BLA
y LEVEL1e

y EndVol
p

j 165
y BrlVol

y LEVEL1b
.xNOPAGENUM

y H1
 TITY'#B

y P
 BLO
y LEVEL1e
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Running Line Kurzschrift</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="footer_level" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:level2>
            <dtb:h2>Running <brl:running-line brl:grade="1">Index</brl:running-line><brl:running-line brl:grade="2">Laufindex</brl:running-line>line</dtb:h2>
            <dtb:p>Geklappert?</dtb:p> 
          </dtb:level2>
        </stub>
      </utfx:source>
      <utfx:expected>
y LEVEL2b
.xNOPAGENUM

y H2
 R/N*G L*E
~L1F*DE'X

y P
 &amp;KLAPP7T?
y LEVEL2e
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Running Line Vollschrift</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
      <utfx:with-param name="footer_level" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:level2>
            <dtb:h2>Running <brl:running-line brl:grade="1">Index</brl:running-line><brl:running-line brl:grade="2">Laufindex</brl:running-line>line</dtb:h2>
	    <dtb:p>Geklappert?</dtb:p> 
          </dtb:level2>
        </stub>
      </utfx:source>
      <utfx:expected>
y LEVEL2b
.xNOPAGENUM

y H2
 RUNNING LINE
~INDEX

y P
 GEKLAPPERT?
y LEVEL2e
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Inhaltsverzeichnis</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="toc_level" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">        
          <dtb:level2>
            <dtb:h2>Inhaltsverzeichnis<brl:toc-line>Etwas ganz anderes</brl:toc-line></dtb:h2>
            <dtb:p>Geklappert?</dtb:p> 
          </dtb:level2>
        </stub>
      </utfx:source>
      <utfx:expected>
y LEVEL2b
.xNOPAGENUM

y H2
 *H:TSV7Z34X
HTW GZ ,7%

y P
 &amp;KLAPP7T?
y LEVEL2e
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Nodes starting and ending with punctuation</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="toc_level" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">        
            <dtb:p>Was?</dtb:p> 
            <dtb:p>Als ich ...</dtb:p> 
            <dtb:p>Nun ...</dtb:p> 
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 W?
y P
 3 # ...
y P
 N/ ...</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>brl:volume und pagnum</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">        
	  <dtb:p>... bla bla.</dtb:p>
	  <brl:volume brl:grade='2'/>
	  <dtb:pagenum>75</dtb:pagenum>
	  <dtb:p>Bla bla ...</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 ... BLA BLA.
y EndVol
p

j 75
y BrlVol

y P
 BLA BLA ...</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>brl:volume und pagnum with other contraction</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">        
	  <dtb:p>... bla bla.</dtb:p>
	  <brl:volume brl:grade='2'/>
	  <dtb:pagenum>75</dtb:pagenum>
	  <dtb:p>Bla bla ...</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 ... BLA BLA.
j 75
 
y P
 BLA BLA ...</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>brl:volume und levelN/pagnum</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
	  <dtb:level1>
	    <dtb:p>... bla bla.</dtb:p>
	  </dtb:level1>
	  <brl:volume brl:grade="2"/>
	  <dtb:level1>
	    <dtb:pagenum>75</dtb:pagenum>
	    <dtb:h1>Titel</dtb:h1>
	    <dtb:p>Bla bla ...</dtb:p>
	  </dtb:level1>
        </stub>
      </utfx:source>
      <utfx:expected>
y LEVEL1b
.xNOPAGENUM

y P
 ... BLA BLA.
y LEVEL1e

y EndVol
p

j 75
y BrlVol

y LEVEL1b
.xNOPAGENUM

y H1
 TITY

y P
 BLA BLA ...
y LEVEL1e
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>brl:volume und levelN/pagnum with other contraction</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
	  <dtb:level1>
	    <dtb:p>... bla bla.</dtb:p>
	  </dtb:level1>
	  <brl:volume brl:grade="2"/>
	  <dtb:level1>
	    <dtb:pagenum>75</dtb:pagenum>
	    <dtb:h1>Titel</dtb:h1>
	    <dtb:p>Bla bla ...</dtb:p>
	  </dtb:level1>
        </stub>
      </utfx:source>
      <utfx:expected>
y LEVEL1b
.xNOPAGENUM

y P
 ... BLA BLA.
y LEVEL1e

y LEVEL1b
.xNOPAGENUM

j 75
 
y H1
 TITEL

y P
 BLA BLA ...
y LEVEL1e
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>br</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
	  <dtb:p>... bla <dtb:br/>bla.</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 ... BLA uBLA.
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Fehlender Pt. 6 (Apo) vor Anführungszeichen im Wortinnern (#1525)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>Gruppen»mahlzeit«</dtb:p>
          <dtb:p>»Gruppen«mahlzeit</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 GRUPPEN(MAHLZ3T)
y P
 (GRUPPEN)MAHLZ3T</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Fehlender Pt. 6 (Apo) vor Anführungszeichen im Wortinnern (#1525)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>Gruppen»mahlzeit«</dtb:p>
          <dtb:p>»Gruppen«mahlzeit</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 GRUPPC'(MAHLZT)
y P
 (GRUPPC')MAHLZT</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>"ver-"-Vorsilbe wird nach Bindestrich als "-" statt "V7" ausgegeben (#1714)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>Vereinigung</dtb:p>
          <dtb:p>Fußballvereinigung</dtb:p>
          <dtb:p>Fußball-Vereinigung</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 -6>U
y P
 FU'^BAQV76>U
y P
 FU'^BAQ-V76>U</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Schrägstrich zwischen ABBR wird getilgt (#1752)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p><dtb:abbr>A</dtb:abbr>/<dtb:abbr>Z</dtb:abbr></dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 >A!,m>Z</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Schrägstrich zwischen ABBR wird getilgt (#1752)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p><dtb:abbr>A</dtb:abbr>/<dtb:abbr>Z</dtb:abbr></dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 >A!,m>Z</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Zahl nach ABBR erzeugt zwei Apostrophe (#1753)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p><dtb:abbr>A</dtb:abbr>4</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 >A#D</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Zahl nach ABBR erzeugt zwei Apostrophe (#1753)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p><dtb:abbr>A</dtb:abbr>4</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 >A#D</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Pt. 6 (Apo) nach Zahl vor A-J innerhalb A (URLs) (#1815)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p><dtb:a href="http://www.fit4chat.ch" external="true"><brl:computer>www.fit4chat.ch</brl:computer></dtb:a></dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 '$WWW.FIT4CHAT.CH</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Falsche Übersetzung bei BRL:NAME mit Context name_capitalized (#1887)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>
            <brl:name>McDonald</brl:name>
            <brl:name>McBünzli</brl:name>
            <brl:name>McKünzli</brl:name>
          </dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
  $MC$DONALD $MC$B8NZLI $MC$K8NZLI </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Falsche Übersetzung bei BRL:NAME mit Context name_capitalized (#1887)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="hyphenation" select="true()"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>
            <brl:name>Mc­Do­nald</brl:name>
            <brl:name>Mc­Bünz­li</brl:name>
            <brl:name>Mc­Künz­li</brl:name>
          </dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
  $MCt$DOtNALD $MCt$B8NZtLI $MCt$K8NZtLI </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>fehlender Pt. 6 (Apo) nach ABBR, wenn nur 1 Buchstabe in ABBR (#1903)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>Die hohen <dtb:abbr>C</dtb:abbr>s</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 0 HOHC >C'S</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>fehlender Pt. 6 (Apo) nach ABBR, wenn nur 1 Buchstabe in ABBR (#1903)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>bla <dtb:abbr>GmbH</dtb:abbr>s bla</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 BLA $GMB>H'S BLA</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Punkt 6 (Apo) fälschlicherweise vor Klammer, wenn direkt nach Tag (#1902)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>ble <brl:num role="ordinal">33.</brl:num> blo</dtb:p>
          <dtb:p>(bla)</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 BLE #:: BLO
y P
 =BLA=</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>2a &amp; &lt;brl:num&gt;2&lt;/brl:num&gt;a</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p><brl:num>2</brl:num>a</dtb:p>
          <dtb:p>2a</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 #B'A
y P
 #B'A</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>2a &amp; &lt;brl:num&gt;2&lt;/brl:num&gt;a</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p><brl:num>2</brl:num>a</dtb:p>
          <dtb:p>2a</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 #B'A
y P
 #B'A</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>&lt;em&gt;CD&lt;/em&gt;s</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p><dtb:em>CD</dtb:em>s</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 _CD'.S</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>&lt;em&gt;CD&lt;/em&gt;s</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p><dtb:em>CD</dtb:em>s</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 _'CD'.S</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Fehlender Pt. 6 (apo) bei Wort+Zahl-Ausdrücken (#1503)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Peter25</stub>
      </utfx:source>
      <utfx:expected>PET7'#BE</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Fehlender Pt. 6 (apo) bei Wort+Zahl-Ausdrücken (#1503)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Peter25</stub>
      </utfx:source>
      <utfx:expected>PETER#BE</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Number followed by closing quote: apo must be inserted</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>Rakete »Ariane 2« und</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 RAKETE (ARIANE #B') UND</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Letter followed by closing quote: no apo must be inserted</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>Rakete »Ariane B« und </dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>
y P
 RAKETE (ARIANE B) UND </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>closing quote after number: apostrophe must be inserted</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">»2«</stub>
      </utfx:source>
      <utfx:expected>(#B')</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>closing quote after number: apostrophe must be inserted</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">»2«</stub>
      </utfx:source>
      <utfx:expected>(#B')</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
</utfx:tests>
